// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/menu.proto

package common

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Menu struct {
	Metadata             *Metadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Url                  string           `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Ico                  string           `protobuf:"bytes,3,opt,name=ico,proto3" json:"ico,omitempty"`
	Enable               bool             `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	SubMenus             map[int32]string `protobuf:"bytes,5,rep,name=sub_menus,json=subMenus,proto3" json:"sub_menus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Policy               *Policy          `protobuf:"bytes,6,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Menu) Reset()         { *m = Menu{} }
func (m *Menu) String() string { return proto.CompactTextString(m) }
func (*Menu) ProtoMessage()    {}
func (*Menu) Descriptor() ([]byte, []int) {
	return fileDescriptor_11feaaa00ea0b31a, []int{0}
}

func (m *Menu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Menu.Unmarshal(m, b)
}
func (m *Menu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Menu.Marshal(b, m, deterministic)
}
func (m *Menu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Menu.Merge(m, src)
}
func (m *Menu) XXX_Size() int {
	return xxx_messageInfo_Menu.Size(m)
}
func (m *Menu) XXX_DiscardUnknown() {
	xxx_messageInfo_Menu.DiscardUnknown(m)
}

var xxx_messageInfo_Menu proto.InternalMessageInfo

func (m *Menu) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Menu) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Menu) GetIco() string {
	if m != nil {
		return m.Ico
	}
	return ""
}

func (m *Menu) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Menu) GetSubMenus() map[int32]string {
	if m != nil {
		return m.SubMenus
	}
	return nil
}

func (m *Menu) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type MenuTree struct {
	RootMenu             *Menu    `protobuf:"bytes,1,opt,name=rootMenu,proto3" json:"rootMenu,omitempty"`
	SubMenuIds           []int32  `protobuf:"varint,2,rep,packed,name=sub_menu_ids,json=subMenuIds,proto3" json:"sub_menu_ids,omitempty"`
	SubMenus             []*Menu  `protobuf:"bytes,3,rep,name=sub_menus,json=subMenus,proto3" json:"sub_menus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuTree) Reset()         { *m = MenuTree{} }
func (m *MenuTree) String() string { return proto.CompactTextString(m) }
func (*MenuTree) ProtoMessage()    {}
func (*MenuTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_11feaaa00ea0b31a, []int{1}
}

func (m *MenuTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MenuTree.Unmarshal(m, b)
}
func (m *MenuTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MenuTree.Marshal(b, m, deterministic)
}
func (m *MenuTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuTree.Merge(m, src)
}
func (m *MenuTree) XXX_Size() int {
	return xxx_messageInfo_MenuTree.Size(m)
}
func (m *MenuTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuTree.DiscardUnknown(m)
}

var xxx_messageInfo_MenuTree proto.InternalMessageInfo

func (m *MenuTree) GetRootMenu() *Menu {
	if m != nil {
		return m.RootMenu
	}
	return nil
}

func (m *MenuTree) GetSubMenuIds() []int32 {
	if m != nil {
		return m.SubMenuIds
	}
	return nil
}

func (m *MenuTree) GetSubMenus() []*Menu {
	if m != nil {
		return m.SubMenus
	}
	return nil
}

type MenuRequest struct {
	RootMenuId           int32    `protobuf:"varint,1,opt,name=root_menu_id,json=rootMenuId,proto3" json:"root_menu_id,omitempty"`
	RootMenuName         string   `protobuf:"bytes,2,opt,name=root_menu_name,json=rootMenuName,proto3" json:"root_menu_name,omitempty"`
	Menu                 *Menu    `protobuf:"bytes,3,opt,name=menu,proto3" json:"menu,omitempty"`
	Enable               bool     `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuRequest) Reset()         { *m = MenuRequest{} }
func (m *MenuRequest) String() string { return proto.CompactTextString(m) }
func (*MenuRequest) ProtoMessage()    {}
func (*MenuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11feaaa00ea0b31a, []int{2}
}

func (m *MenuRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MenuRequest.Unmarshal(m, b)
}
func (m *MenuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MenuRequest.Marshal(b, m, deterministic)
}
func (m *MenuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuRequest.Merge(m, src)
}
func (m *MenuRequest) XXX_Size() int {
	return xxx_messageInfo_MenuRequest.Size(m)
}
func (m *MenuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MenuRequest proto.InternalMessageInfo

func (m *MenuRequest) GetRootMenuId() int32 {
	if m != nil {
		return m.RootMenuId
	}
	return 0
}

func (m *MenuRequest) GetRootMenuName() string {
	if m != nil {
		return m.RootMenuName
	}
	return ""
}

func (m *MenuRequest) GetMenu() *Menu {
	if m != nil {
		return m.Menu
	}
	return nil
}

func (m *MenuRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func init() {
	proto.RegisterType((*Menu)(nil), "common.Menu")
	proto.RegisterMapType((map[int32]string)(nil), "common.Menu.SubMenusEntry")
	proto.RegisterType((*MenuTree)(nil), "common.MenuTree")
	proto.RegisterType((*MenuRequest)(nil), "common.MenuRequest")
}

func init() { proto.RegisterFile("common/menu.proto", fileDescriptor_11feaaa00ea0b31a) }

var fileDescriptor_11feaaa00ea0b31a = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x76, 0x62, 0xb9, 0x93, 0x10, 0x85, 0x2d, 0x20, 0xcb, 0x27, 0x2b, 0x42, 0xc8, 0x08,
	0x48, 0x94, 0x70, 0x28, 0x82, 0x5b, 0x69, 0x85, 0x72, 0x08, 0x42, 0x2e, 0x5c, 0xb8, 0x54, 0x6b,
	0x7b, 0x9a, 0x5a, 0xd8, 0xde, 0xb0, 0xde, 0x45, 0xca, 0x91, 0x3f, 0x00, 0xbf, 0x8b, 0x7f, 0x85,
	0xf6, 0xc3, 0x69, 0x53, 0x09, 0x29, 0x3d, 0x79, 0xe7, 0xcd, 0x7b, 0x33, 0xef, 0xed, 0xca, 0xf0,
	0x28, 0x67, 0x75, 0xcd, 0x9a, 0x59, 0x8d, 0x8d, 0x9c, 0x6e, 0x38, 0x13, 0x8c, 0xf8, 0x06, 0x8a,
	0x8e, 0x6d, 0x6b, 0xc3, 0xaa, 0x32, 0xdf, 0x9a, 0x66, 0xf4, 0x64, 0xc7, 0x17, 0xb4, 0xa0, 0x82,
	0x1a, 0x78, 0xf2, 0xdb, 0x85, 0xde, 0x0a, 0x1b, 0x49, 0x5e, 0x41, 0xd0, 0xb5, 0x42, 0x27, 0x76,
	0x92, 0xc1, 0x62, 0x3c, 0x35, 0x92, 0xe9, 0xca, 0xe2, 0xe9, 0x8e, 0x41, 0xc6, 0xe0, 0x49, 0x5e,
	0x85, 0x6e, 0xec, 0x24, 0x47, 0xa9, 0x3a, 0x2a, 0xa4, 0xcc, 0x59, 0xe8, 0x19, 0xa4, 0xcc, 0x19,
	0x79, 0x0a, 0x3e, 0x36, 0x34, 0xab, 0x30, 0xec, 0xc5, 0x4e, 0x12, 0xa4, 0xb6, 0x22, 0x27, 0x70,
	0xd4, 0xca, 0xec, 0x52, 0x19, 0x6f, 0xc3, 0x7e, 0xec, 0x25, 0x83, 0x45, 0x74, 0xb3, 0xaa, 0x91,
	0xd3, 0x0b, 0x99, 0xa9, 0x6f, 0x7b, 0xde, 0x08, 0xbe, 0x4d, 0x83, 0xd6, 0x96, 0xe4, 0x39, 0xf8,
	0x26, 0x52, 0xe8, 0x6b, 0x83, 0xa3, 0x4e, 0xf5, 0x59, 0xa3, 0xa9, 0xed, 0x46, 0xef, 0xe1, 0xe1,
	0xde, 0x08, 0xe5, 0xed, 0x3b, 0x6e, 0x75, 0xac, 0x7e, 0xaa, 0x8e, 0xe4, 0x31, 0xf4, 0x7f, 0xd2,
	0x4a, 0xa2, 0x4d, 0x60, 0x8a, 0x77, 0xee, 0x5b, 0x67, 0xf2, 0xcb, 0x81, 0x40, 0x49, 0xbf, 0x70,
	0x44, 0x92, 0x40, 0xc0, 0x19, 0x13, 0xaa, 0xb6, 0x97, 0x32, 0xbc, 0xed, 0x34, 0xdd, 0x75, 0x49,
	0x0c, 0xc3, 0x2e, 0xd4, 0x65, 0x59, 0xb4, 0xa1, 0x1b, 0x7b, 0x49, 0x3f, 0x05, 0xeb, 0x7d, 0x59,
	0xb4, 0xe4, 0xc5, 0xed, 0xd8, 0x9e, 0x8e, 0x7d, 0x67, 0x58, 0x17, 0x74, 0xf2, 0xc7, 0x81, 0x81,
	0x86, 0xf0, 0x87, 0xc4, 0x56, 0xa8, 0xe1, 0x6a, 0x51, 0x37, 0xdd, 0x06, 0x81, 0x6e, 0xf9, 0xb2,
	0x20, 0xcf, 0x60, 0x74, 0xc3, 0x68, 0x68, 0xdd, 0x05, 0x1b, 0x76, 0x9c, 0x4f, 0xb4, 0x46, 0x12,
	0x43, 0x4f, 0x11, 0xf4, 0x23, 0xdd, 0xdd, 0xae, 0x3b, 0xff, 0x7b, 0xb3, 0xc5, 0x5f, 0x17, 0x46,
	0x8a, 0xb6, 0xa2, 0x0d, 0x5d, 0x63, 0x8d, 0x8d, 0x20, 0x73, 0x80, 0x0f, 0x1c, 0xa9, 0x40, 0x9d,
	0xff, 0x78, 0x6f, 0x98, 0xf1, 0x1d, 0xed, 0x6d, 0x98, 0x3c, 0x20, 0x0b, 0x18, 0x7c, 0x44, 0x6d,
	0xe7, 0x74, 0xbb, 0x3c, 0x3b, 0x4c, 0x73, 0x02, 0xe3, 0x0b, 0xa4, 0x3c, 0xbf, 0x36, 0x32, 0x9d,
	0xe3, 0x20, 0xe1, 0x1c, 0xe0, 0xeb, 0xa6, 0xb8, 0x97, 0xbf, 0x39, 0xc0, 0x19, 0x56, 0x78, 0x4f,
	0xc9, 0xb9, 0xbe, 0xa2, 0x83, 0x25, 0xa7, 0xaf, 0xbf, 0xbd, 0x5c, 0x97, 0xe2, 0x5a, 0x66, 0x0a,
	0x9f, 0x61, 0x75, 0xc5, 0xf8, 0x5a, 0x7d, 0x36, 0x15, 0x15, 0x57, 0x8c, 0xd7, 0x33, 0xfd, 0x67,
	0xb6, 0x33, 0xa3, 0xca, 0x7c, 0x5d, 0xbe, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x73, 0xbd,
	0x43, 0xf1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MenuManagementClient is the client API for MenuManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MenuManagementClient interface {
	CreateMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
	GetMenuByID(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
	SearchMenuByName(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
	UpdateMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
	DeleteMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
	EnableMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error)
}

type menuManagementClient struct {
	cc *grpc.ClientConn
}

func NewMenuManagementClient(cc *grpc.ClientConn) MenuManagementClient {
	return &menuManagementClient{cc}
}

func (c *menuManagementClient) CreateMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuManagementClient) GetMenuByID(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/GetMenuByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuManagementClient) SearchMenuByName(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/SearchMenuByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuManagementClient) UpdateMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuManagementClient) DeleteMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuManagementClient) EnableMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/common.MenuManagement/EnableMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuManagementServer is the server API for MenuManagement service.
type MenuManagementServer interface {
	CreateMenu(context.Context, *MenuRequest) (*Menu, error)
	GetMenuByID(context.Context, *MenuRequest) (*Menu, error)
	SearchMenuByName(context.Context, *MenuRequest) (*Menu, error)
	UpdateMenu(context.Context, *MenuRequest) (*Menu, error)
	DeleteMenu(context.Context, *MenuRequest) (*Menu, error)
	EnableMenu(context.Context, *MenuRequest) (*Menu, error)
}

func RegisterMenuManagementServer(s *grpc.Server, srv MenuManagementServer) {
	s.RegisterService(&_MenuManagement_serviceDesc, srv)
}

func _MenuManagement_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).CreateMenu(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuManagement_GetMenuByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).GetMenuByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/GetMenuByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).GetMenuByID(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuManagement_SearchMenuByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).SearchMenuByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/SearchMenuByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).SearchMenuByName(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuManagement_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).UpdateMenu(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuManagement_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).DeleteMenu(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuManagement_EnableMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuManagementServer).EnableMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MenuManagement/EnableMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuManagementServer).EnableMenu(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MenuManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.MenuManagement",
	HandlerType: (*MenuManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenu",
			Handler:    _MenuManagement_CreateMenu_Handler,
		},
		{
			MethodName: "GetMenuByID",
			Handler:    _MenuManagement_GetMenuByID_Handler,
		},
		{
			MethodName: "SearchMenuByName",
			Handler:    _MenuManagement_SearchMenuByName_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuManagement_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuManagement_DeleteMenu_Handler,
		},
		{
			MethodName: "EnableMenu",
			Handler:    _MenuManagement_EnableMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/menu.proto",
}
