// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/menu.proto

package common

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Menu struct {
	Value                *MenuValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Policy               *Policy    `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	SubMenu              []*Menu    `protobuf:"bytes,3,rep,name=sub_menu,json=subMenu,proto3" json:"sub_menu,omitempty"`
	Enable               bool       `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Menu) Reset()         { *m = Menu{} }
func (m *Menu) String() string { return proto.CompactTextString(m) }
func (*Menu) ProtoMessage()    {}
func (*Menu) Descriptor() ([]byte, []int) {
	return fileDescriptor_11feaaa00ea0b31a, []int{0}
}

func (m *Menu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Menu.Unmarshal(m, b)
}
func (m *Menu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Menu.Marshal(b, m, deterministic)
}
func (m *Menu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Menu.Merge(m, src)
}
func (m *Menu) XXX_Size() int {
	return xxx_messageInfo_Menu.Size(m)
}
func (m *Menu) XXX_DiscardUnknown() {
	xxx_messageInfo_Menu.DiscardUnknown(m)
}

var xxx_messageInfo_Menu proto.InternalMessageInfo

func (m *Menu) GetValue() *MenuValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Menu) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *Menu) GetSubMenu() []*Menu {
	if m != nil {
		return m.SubMenu
	}
	return nil
}

func (m *Menu) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type MenuValue struct {
	Metadata             *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Address              string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Level                int32     `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Index                int32     `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MenuValue) Reset()         { *m = MenuValue{} }
func (m *MenuValue) String() string { return proto.CompactTextString(m) }
func (*MenuValue) ProtoMessage()    {}
func (*MenuValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_11feaaa00ea0b31a, []int{1}
}

func (m *MenuValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MenuValue.Unmarshal(m, b)
}
func (m *MenuValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MenuValue.Marshal(b, m, deterministic)
}
func (m *MenuValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuValue.Merge(m, src)
}
func (m *MenuValue) XXX_Size() int {
	return xxx_messageInfo_MenuValue.Size(m)
}
func (m *MenuValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuValue.DiscardUnknown(m)
}

var xxx_messageInfo_MenuValue proto.InternalMessageInfo

func (m *MenuValue) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MenuValue) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MenuValue) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MenuValue) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*Menu)(nil), "common.Menu")
	proto.RegisterType((*MenuValue)(nil), "common.MenuValue")
}

func init() { proto.RegisterFile("common/menu.proto", fileDescriptor_11feaaa00ea0b31a) }

var fileDescriptor_11feaaa00ea0b31a = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0xdf, 0x3c, 0x68, 0x0b, 0x97, 0x97, 0x97, 0xc7, 0xf0, 0x34, 0x0d, 0xab, 0x86, 0x85,
	0x34, 0x41, 0x29, 0x81, 0x4f, 0xa0, 0x1b, 0x57, 0x26, 0x66, 0x88, 0x2e, 0xdc, 0x98, 0x29, 0xbd,
	0x60, 0x93, 0xe9, 0x9f, 0xb4, 0x53, 0xa2, 0x2b, 0xbf, 0x86, 0x5b, 0xbf, 0xa9, 0x99, 0x3f, 0x45,
	0x49, 0xdc, 0xb8, 0x6a, 0xce, 0x39, 0xbf, 0x3b, 0xf7, 0x4c, 0x07, 0x86, 0x9b, 0x22, 0xcb, 0x8a,
	0x3c, 0xca, 0x30, 0x6f, 0xe6, 0x65, 0x55, 0xc8, 0x82, 0xba, 0xc6, 0x1a, 0x8f, 0x6c, 0x54, 0x16,
	0x22, 0xdd, 0xbc, 0x98, 0x70, 0x7c, 0x72, 0xe0, 0x25, 0x4f, 0xb8, 0xe4, 0xd6, 0xa6, 0xd6, 0xae,
	0xb0, 0x14, 0x16, 0x9d, 0xbc, 0x11, 0xe8, 0xde, 0x60, 0xde, 0xd0, 0x29, 0x38, 0x7b, 0x2e, 0x1a,
	0xf4, 0x49, 0x40, 0xc2, 0xc1, 0x72, 0x38, 0x37, 0xf0, 0x5c, 0x85, 0xf7, 0x2a, 0x60, 0x26, 0xa7,
	0x67, 0xe0, 0x9a, 0x65, 0xfe, 0x6f, 0x4d, 0xfe, 0x6d, 0xc9, 0x5b, 0xed, 0x32, 0x9b, 0xd2, 0x29,
	0xf4, 0xea, 0x26, 0x7e, 0x54, 0x9d, 0xfd, 0x4e, 0xd0, 0x09, 0x07, 0xcb, 0x3f, 0x5f, 0xcf, 0x64,
	0x5e, 0xdd, 0xc4, 0x7a, 0xf3, 0x29, 0xb8, 0x98, 0xf3, 0x58, 0xa0, 0xdf, 0x0d, 0x48, 0xd8, 0x63,
	0x56, 0x4d, 0x5e, 0xa1, 0x7f, 0x58, 0x4e, 0xcf, 0xa1, 0xd7, 0xde, 0xc6, 0x36, 0xfc, 0xf7, 0x79,
	0x9a, 0xf1, 0xd9, 0x81, 0xa0, 0x3e, 0x78, 0x3c, 0x49, 0x2a, 0xac, 0x6b, 0x5d, 0xb2, 0xcf, 0x5a,
	0x49, 0xff, 0x83, 0x23, 0x70, 0x8f, 0xc2, 0xef, 0x04, 0x24, 0x74, 0x98, 0x11, 0xca, 0x4d, 0xf3,
	0x04, 0x9f, 0x75, 0x03, 0x87, 0x19, 0xb1, 0x7c, 0x27, 0x30, 0x50, 0x0d, 0xd6, 0x58, 0xed, 0xd3,
	0x0d, 0xd2, 0x05, 0x78, 0x97, 0x49, 0xa2, 0x3b, 0x1f, 0x5d, 0x65, 0x3c, 0x6a, 0xd5, 0x3a, 0xcd,
	0x4a, 0x81, 0x4c, 0xfd, 0xdf, 0xc9, 0xaf, 0x90, 0xd0, 0x15, 0xc0, 0x5d, 0x99, 0x70, 0x89, 0x3f,
	0x19, 0x9a, 0x81, 0x77, 0x8d, 0xf2, 0x9b, 0x89, 0x23, 0xa5, 0xd0, 0x05, 0xb9, 0xba, 0x78, 0x98,
	0xed, 0x52, 0xf9, 0xd4, 0xc4, 0x2a, 0x8b, 0x50, 0x6c, 0x8b, 0x6a, 0xa7, 0x3e, 0xa5, 0xe0, 0x72,
	0x5b, 0x54, 0x59, 0xa4, 0x9f, 0xb9, 0x8e, 0xcc, 0x64, 0xec, 0x6a, 0xb9, 0xfa, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xfd, 0x9e, 0x32, 0xbc, 0x52, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MenuServiceClient interface {
	AddMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_AddMenuClient, error)
	UpdateMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_UpdateMenuClient, error)
	GetMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_GetMenuClient, error)
}

type menuServiceClient struct {
	cc *grpc.ClientConn
}

func NewMenuServiceClient(cc *grpc.ClientConn) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) AddMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_AddMenuClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MenuService_serviceDesc.Streams[0], "/common.MenuService/AddMenu", opts...)
	if err != nil {
		return nil, err
	}
	x := &menuServiceAddMenuClient{stream}
	return x, nil
}

type MenuService_AddMenuClient interface {
	Send(*Menu) error
	CloseAndRecv() (*SimpleReply, error)
	grpc.ClientStream
}

type menuServiceAddMenuClient struct {
	grpc.ClientStream
}

func (x *menuServiceAddMenuClient) Send(m *Menu) error {
	return x.ClientStream.SendMsg(m)
}

func (x *menuServiceAddMenuClient) CloseAndRecv() (*SimpleReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *menuServiceClient) UpdateMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_UpdateMenuClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MenuService_serviceDesc.Streams[1], "/common.MenuService/UpdateMenu", opts...)
	if err != nil {
		return nil, err
	}
	x := &menuServiceUpdateMenuClient{stream}
	return x, nil
}

type MenuService_UpdateMenuClient interface {
	Send(*Menu) error
	CloseAndRecv() (*SimpleReply, error)
	grpc.ClientStream
}

type menuServiceUpdateMenuClient struct {
	grpc.ClientStream
}

func (x *menuServiceUpdateMenuClient) Send(m *Menu) error {
	return x.ClientStream.SendMsg(m)
}

func (x *menuServiceUpdateMenuClient) CloseAndRecv() (*SimpleReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *menuServiceClient) GetMenu(ctx context.Context, opts ...grpc.CallOption) (MenuService_GetMenuClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MenuService_serviceDesc.Streams[2], "/common.MenuService/GetMenu", opts...)
	if err != nil {
		return nil, err
	}
	x := &menuServiceGetMenuClient{stream}
	return x, nil
}

type MenuService_GetMenuClient interface {
	Send(*Menu) error
	Recv() (*Menu, error)
	grpc.ClientStream
}

type menuServiceGetMenuClient struct {
	grpc.ClientStream
}

func (x *menuServiceGetMenuClient) Send(m *Menu) error {
	return x.ClientStream.SendMsg(m)
}

func (x *menuServiceGetMenuClient) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MenuServiceServer is the server API for MenuService service.
type MenuServiceServer interface {
	AddMenu(MenuService_AddMenuServer) error
	UpdateMenu(MenuService_UpdateMenuServer) error
	GetMenu(MenuService_GetMenuServer) error
}

func RegisterMenuServiceServer(s *grpc.Server, srv MenuServiceServer) {
	s.RegisterService(&_MenuService_serviceDesc, srv)
}

func _MenuService_AddMenu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MenuServiceServer).AddMenu(&menuServiceAddMenuServer{stream})
}

type MenuService_AddMenuServer interface {
	SendAndClose(*SimpleReply) error
	Recv() (*Menu, error)
	grpc.ServerStream
}

type menuServiceAddMenuServer struct {
	grpc.ServerStream
}

func (x *menuServiceAddMenuServer) SendAndClose(m *SimpleReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *menuServiceAddMenuServer) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MenuService_UpdateMenu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MenuServiceServer).UpdateMenu(&menuServiceUpdateMenuServer{stream})
}

type MenuService_UpdateMenuServer interface {
	SendAndClose(*SimpleReply) error
	Recv() (*Menu, error)
	grpc.ServerStream
}

type menuServiceUpdateMenuServer struct {
	grpc.ServerStream
}

func (x *menuServiceUpdateMenuServer) SendAndClose(m *SimpleReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *menuServiceUpdateMenuServer) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MenuService_GetMenu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MenuServiceServer).GetMenu(&menuServiceGetMenuServer{stream})
}

type MenuService_GetMenuServer interface {
	Send(*Menu) error
	Recv() (*Menu, error)
	grpc.ServerStream
}

type menuServiceGetMenuServer struct {
	grpc.ServerStream
}

func (x *menuServiceGetMenuServer) Send(m *Menu) error {
	return x.ServerStream.SendMsg(m)
}

func (x *menuServiceGetMenuServer) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MenuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddMenu",
			Handler:       _MenuService_AddMenu_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateMenu",
			Handler:       _MenuService_UpdateMenu_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMenu",
			Handler:       _MenuService_GetMenu_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common/menu.proto",
}
